{"mappings":"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","sources":["src/js/move.js","src/js/main.js"],"sourcesContent":["/***********************\n * Shift values up\n * Match values\n * Shift values up\n **********************/\nexport const up = board => {\n  // Declare variables\n  var shift = false;\n  var repeated = false;\n  var matchedTiles = [];\n  var didShift = false;\n\n  // Use do...while() for a breakable \"if\" statement\n  do {\n    // Run through each available column\n    for (var col = 0; col < board.length; col++) {\n      // Shift the available values down\n      shift = true;\n      while (shift) {\n        // Iterate through each row (top to bottom) checking the value above to it\n        shift = false;\n        for (var row = 0; row < board.length - 1; row++) {\n          // Check if this tile is empty and the one below it is not-empty\n          if (board[row][col] === 0 && board[row + 1][col] !== 0) {\n            board[row][col] = board[row + 1][col];\n            board[row + 1][col] = 0;\n            shift = true;\n            didShift = true;\n          }\n        }\n      }\n    }\n\n    // Break from do...while() when loop has repeated\n    if (repeated) {\n      repeated = false;\n      break;\n    }\n\n    // Match the values\n    for (var col = 0; col < board.length; col++) {\n      // Match each row by the value above\n      for (var row = 0; row < board.length - 1; row++) {\n        // Do comparisons using [row + 1] for previous element\n        if (board[row + 1][col] === board[row][col] && board[row][col] !== 0) {\n          board[row + 1][col] = board[row][col] * 2;\n          board[row][col] = 0;\n          matchedTiles.push([row, col]);\n          didShift = true;\n        }\n      }\n    }\n\n    // Repeat run when fully executed\n    repeated = true;\n  } while (repeated); // End while() when broken prematurely\n\n  // Return whether or not a successful match has been made\n  return { tiles: matchedTiles, didShift };\n};\n\n/***********************\n * Shift values down\n * Match values\n * Shift values down\n **********************/\nexport const down = board => {\n  // Declare variables\n  var shift = false;\n  var repeated = false;\n  var matchedTiles = [];\n  var didShift = false;\n\n  // Use do...while() for a breakable \"if\" statement\n  do {\n    // Run through each available column\n    for (var col = 0; col < board.length; col++) {\n      // Shift the available values down\n      shift = true;\n      while (shift) {\n        // Iterate through each row (bottom to top) checking the value below it\n        shift = false;\n        for (var row = board.length - 1; row > 0; row--) {\n          // Check if this tile is empty and the one above it is not-empty\n          if (board[row][col] === 0 && board[row - 1][col] !== 0) {\n            board[row][col] = board[row - 1][col];\n            board[row - 1][col] = 0;\n            shift = true;\n            didShift = true;\n          }\n        }\n      }\n    }\n\n    // Break from do...while() when loop has repeated\n    if (repeated) {\n      repeated = false;\n      break;\n    }\n\n    // Match the values\n    for (var col = 0; col < board.length; col++) {\n      // Match each column by the value to the left\n      for (var row = board.length - 1; row > 0; row--) {\n        // Do comparisons using [col + 1] for previous element\n        if (board[row - 1][col] === board[row][col] && board[row][col] !== 0) {\n          board[row - 1][col] = board[row][col] * 2;\n          board[row][col] = 0;\n          matchedTiles.push([row, col]);\n          didShift = true;\n        }\n      }\n    }\n\n    // Repeat run when fully executed\n    repeated = true;\n  } while (repeated); // End while() when broken prematurely\n\n  // Return whether or not a successful match has been made\n  return { tiles: matchedTiles, didShift };\n};\n\n/***********************\n * Shift values to left\n * Match values\n * Shift values to left\n **********************/\n\nexport const left = board => {\n  // Declare variables\n  var shift = false;\n  var repeated = false;\n  var matchedTiles = [];\n  var didShift = false;\n\n  // Use do...while() for a breakable \"if\" statement\n  do {\n    // Run through each available row\n    for (var row = 0; row < board.length; row++) {\n      // Shift the available values to the left\n      shift = true;\n      while (shift) {\n        // Iterate through each column checking the value next to it\n        shift = false;\n        for (var col = 1; col < board[row].length; col++) {\n          // Check if the column to the left is empty and the right is not-empty\n          if (board[row][col - 1] === 0 && board[row][col] !== 0) {\n            board[row][col - 1] = board[row][col];\n            board[row][col] = 0;\n            shift = true;\n            didShift = true;\n          }\n        }\n      }\n    }\n\n    // Break from do...while() when loop has repeated\n    if (repeated) {\n      repeated = false;\n      break;\n    }\n\n    // Match the values\n    for (var row = 0; row < board.length; row++) {\n      // Match each column by the value to the left\n      for (var col = 0; col < board.length - 1; col++) {\n        // Do comparisons using [col + 1] for previous element\n        if (board[row][col + 1] === board[row][col] && board[row][col] !== 0) {\n          board[row][col] = board[row][col] * 2;\n          board[row][col + 1] = 0;\n          matchedTiles.push([row, col]);\n          didShift = true;\n        }\n      }\n    }\n\n    // Repeat run when fully executed\n    repeated = true;\n  } while (repeated); // End while() when broken prematurely\n\n  // Return whether or not a successful match has been made\n  return { tiles: matchedTiles, didShift };\n};\n\n/***********************\n * Shift values to right\n * Match values\n * Shift values to right\n **********************/\n\nexport const right = board => {\n  // Declare variables\n  var shift = false;\n  var matchedTiles = [];\n  var repeated = false;\n  var didShift = false;\n\n  // Use do...while() for a breakable \"if\" statement\n  do {\n    // Run through each available row\n    for (var row = 0; row < board.length; row++) {\n      // Shift the available values to the right\n      shift = true;\n      while (shift) {\n        // Iterate through each column checking the value next to it\n        shift = false;\n        for (var col = board[row].length - 2; col > -1; col--) {\n          // Check if the column to the right is empty and the left is not-empty\n          if (board[row][col + 1] === 0 && board[row][col] !== 0) {\n            board[row][col + 1] = board[row][col];\n            board[row][col] = 0;\n            shift = true;\n            didShift = true;\n          }\n        }\n      }\n    }\n\n    // Break from do...while() when loop has repeated\n    if (repeated) {\n      repeated = false;\n      break;\n    }\n\n    // Match the values\n    for (var row = 0; row < board.length; row++) {\n      // Match each column by the value to the left\n      for (var col = board.length - 1; col > -1; col--) {\n        // Validate the previous column exists\n        if (col - 1 === -1) {\n          break;\n        }\n\n        // Do comparisons using [col - 1] for previous element\n        if (board[row][col - 1] === board[row][col] && board[row][col] !== 0) {\n          board[row][col] = board[row][col] * 2;\n          board[row][col - 1] = 0;\n          matchedTiles.push([row, col]);\n          didShift = true;\n        }\n      }\n    }\n\n    // Repeat run when fully executed\n    repeated = true;\n  } while (repeated); // End while() when broken prematurely\n\n  // Return whether or not a successful match has been made\n  return { tiles: matchedTiles, didShift };\n};\n\nexport const generateTile = board => {\n  //Loop through the board and record all blank tiles and their positions\n  var blanks = [];\n  board.forEach((row, i) => {\n    row.forEach((tile, j) => {\n      if (tile === 0) blanks.push([i, j]);\n    });\n  });\n\n  //Grab a random value from the blanks array\n  var randomValue = getRandomInt(0, blanks.length - 1);\n\n  //Set the blank tile in the position corresponding to that random value equal to either 2 or a 4\n  board[blanks[randomValue][0]][blanks[randomValue][1]] = probability(0.5)\n    ? 2\n    : 4;\n\n  return [blanks[randomValue][0], blanks[randomValue][1]];\n};\n\nexport const validateBoard = board => {\n  // Assume user can't move\n  var safe = false;\n\n  // Loop through each index of the board and check if a match can be made\n  var value = 0;\n  for (var row = 0; !safe && row < board.length; row++) {\n    for (var col = 0; !safe && col < board[row].length; col++) {\n      // Set the current value\n      value = board[row][col];\n\n      // Check if the current value is 0 (can still move)\n      safe = value === 0;\n      if (safe) {\n        break;\n      }\n\n      // Check the \"above\" row\n      if (row - 1 !== -1) {\n        safe = safe || board[row - 1][col] === value;\n      }\n\n      // Check the \"below\" row\n      if (row + 1 !== board.length) {\n        safe = safe || board[row + 1][col] === value;\n      }\n\n      // Check the \"left\" column\n      if (col - 1 !== -1) {\n        safe = safe || board[row][col - 1] === value;\n      }\n\n      // Check the \"right\" column\n      if (col + 1 !== board[row].length) {\n        safe = safe || board[row][col + 1] === value;\n      }\n    }\n  }\n\n  return safe;\n};\n\nconst getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n// Generate # between 0 and 1, check less than given integer or 0.5\nvar probability = function (n) {\n  return Math.random() <= parseFloat(n || 0.5);\n};\n","import { right, left, up, down, generateTile, validateBoard } from \"./move.js\";\nvar data = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst board = document.getElementsByClassName(\"board\")[0];\nconst scoreTxtObj = document.getElementById(\"score\");\nconst highscoreTxtObj = document.getElementById(\"highscore\");\nvar score = 0;\nvar hasWon = false;\nvar xDown = null;\nvar yDown = null;\n\n// Basic function to restart the game for a new playthrough\nconst startGame = selectedData => {\n  score = 0;\n  hasWon = false;\n  scoreTxtObj.textContent = score;\n  highscoreTxtObj.textContent = getCookie(\"highscore\");\n  document.getElementById(\"board-container\").classList.add(\"play-screen\");\n  document.getElementById(\"side-container\").classList.add(\"play-screen\");\n  document.onkeydown = null;\n  document.removeEventListener('touchstart', handleTouchStart, false);\n  document.removeEventListener('touchmove',  handleTouchMove, false);\n\n};\n\nconst getCookie = key => {\n  var cookieArr = document.cookie.split(\";\");\n  for (var cnt = 0; cnt < cookieArr.length; cnt++) {\n    var cookiePair = cookieArr[cnt].split(\"=\");\n\n    if (key === cookiePair[0].trim()) {\n      return decodeURIComponent(cookiePair[1]);\n    }\n  }\n\n  return \"0\";\n};\n\n// Restart the game as the page loads\nwindow.onload = () => {\n  startGame();\n};\n\n// TODO : 01/19/2022 : Replace with a more elequent message\nconst loseGame = () => {\n  if (Swal.isVisible()) {\n    return;\n  }\n  Swal.fire({\n    icon: \"error\",\n    title: \"You Lose\",\n    html: \"<h4>Sorry! Do you want to try again?</h4>\",\n    showCloseButton: true,\n    confirmButtonText: \"Restart\",\n  }).then(result => {\n    if (result.isConfirmed) {\n      saveScore();\n      startGame();\n    }\n  });\n};\n\n//You win\nconst winGame = () => {\n  if (Swal.isVisible()) {\n    return;\n  }\n  Swal.fire({\n    icon: \"success\",\n    title: \"You Won!\",\n    html: \"<h4>Close to continue, or restart for a new board.</h4>\",\n    showCloseButton: true,\n    confirmButtonText: \"Restart\",\n  }).then(result => {\n    if (result.isConfirmed) {\n      saveScore();\n      startGame();\n    }\n  });\n};\n\n// Render the board from the data array\nconst rerenderBoard = () => {\n  board.innerHTML = \"\";\n  data.forEach((row, i) => {\n    const rowElement = document.createElement(\"div\");\n    rowElement.className = \"row\";\n\n    row.forEach((item, j) => {\n      const tile = document.createElement(\"div\");\n      tile.textContent = item !== 0 ? item : \"\";\n\n      // Set id to the tile's position for reference\n      tile.id = i.toString() + j.toString();\n\n      // Set class name to the tile's value for appropriate styling\n      tile.className = \"tile t\" + tile.textContent;\n\n      rowElement.appendChild(tile);\n    });\n    board.appendChild(rowElement);\n  });\n};\n\n// Initalize arrow key event listeners\nconst checkKey = (e, swipe, direction) => {\n  // Reflow the animations\n  triggerReflow(board);\n\n  // Grab the event with the key code\n  e = e || window.event;\n  e.preventDefault(); // Avoid document sliding to the direction used\n  var keyCode = parseInt(swipe || e.keyCode);\n  var direction = (typeof swipe !== \"number\") ? e.key.substr(\"Arrow\".length).toLowerCase() : direction;\n\n  // Return if invalid arrow key\n  if (keyCode < 36 || keyCode > 41) return;\n\n  // Set the animation style depending on the direction\n  // var direction = e.key.substr(\"Arrow\".length).toLowerCase();\n  board.style.animation = direction + \" 0.5s ease-in-out 0s 1 forwards\";\n\n  var matched = {};\n  if (keyCode == 37 || e.detail.dir === \"left\") {\n    matched = left(data);\n  } else if (keyCode == 38 || e.detail.dir === \"up\") {\n    matched = up(data);\n  } else if (keyCode == 39 || e.detail.dir === \"right\") {\n    matched = right(data);\n  } else if (keyCode == 40 || e.detail.dir === \"down\") {\n    matched = down(data);\n  }\n\n  // Generate a new tile if there was any shift\n  if (matched.didShift) {\n    const newTilePos = generateTile(data);\n    rerenderBoard();\n\n    const newTileObj = document.getElementById(\n      newTilePos[0].toString() + newTilePos[1].toString()\n    );\n\n    // Animation reflow and apply the animation to the newly generated tile\n    triggerReflow(newTileObj);\n    newTileObj.style.animation = \"new 0.3s ease-in-out 0s 1 forwards\";\n  }\n\n  // Animate the matched tiles after the board has been rerendered\n  // Add to the score -----------------------------------------------------------------------\n  if (matched.tiles.length > 0) {\n    // Get tile DOM Elements\n    matched.tiles.forEach(tile => {\n      if (data[tile[0]][tile[1]] !== 0) {\n        //Get tile DOM Elements\n        const matchedTile = document.getElementById(\n          tile[0].toString() + tile[1].toString()\n        );\n\n        // Add to the score variable and set that value to the text content of the score text DOM element\n        score += !isNaN(parseInt(matchedTile.textContent))\n          ? parseInt(matchedTile.textContent)\n          : 0;\n        scoreTxtObj.textContent = score;\n\n        if (score > parseInt(highscoreTxtObj.textContent)) {\n          highscoreTxtObj.textContent = score;\n          saveScore();\n          triggerReflow(highscoreTxtObj);\n          highscoreTxtObj.style.animation =\n            \"addScore 0.5s ease-in-out 0s 1 forwards\";\n        }\n\n        // Animation reflow and apply the animation to Score Text\n        triggerReflow(scoreTxtObj);\n        scoreTxtObj.style.animation = \"addScore 0.5s ease-in-out 0s 1 forwards\";\n\n        // Animation reflow and apply the animation to the matched tiles\n        triggerReflow(matchedTile);\n        matchedTile.style.animation = \"match 0.5s ease-in-out 0s 1 forwards\";\n      }\n    });\n  }\n\n  // If board is no longer valid, alert the user asynchronously\n  if (!validateBoard(data) && !Swal.isVisible()) {\n    setTimeout(loseGame, 500);\n    hasWon = false;\n  }\n\n  // If 2048 is found and the player wins\n  if (matched.tiles.length > 0 && !hasWon) {\n    // Get tile DOM Elements\n    matched.tiles.forEach(tile => {\n      if (data[tile[0]][tile[1]] == 2048 && !Swal.isVisible()) {\n        setTimeout(winGame, 500);\n        hasWon = true;\n      }\n    });\n  }\n\n};\n\nconst triggerReflow = obj => {\n  obj.style.animation = \"none\";\n  obj.offsetHeight;\n  obj.style.animation = null;\n};\n\nconst saveScore = () => {\n  document.cookie =\n    \"highscore=\" + highscoreTxtObj.textContent + \"; max-age=3600; path=/\";\n};\n\n// Initalize collapse button click event listener\ndocument.getElementById(\"collapseBtn\").onclick = () => {\n  document.getElementById(\"side-container\").classList.toggle(\"collapse\");\n};\n\n// Initalize play button click event listener\ndocument.getElementById(\"play-btn\").onclick = () => {\n  const layout = parseInt(document.getElementById(\"layoutTxt\").value);\n  if (layout > 100 || layout <= 0 || isNaN(layout)) {\n    Swal.fire({\n      icon: \"error\",\n      title: \"That layout value is invaild!\",\n      html: \"<h4>Please use a different layout value.</h4>\",\n      showCloseButton: true,\n      confirmButtonText: \"Ok\",\n    });\n  } else {\n    var customBoard = [];\n\n    for (var i = 0; i < layout; i++) {\n      customBoard.push([]);\n      for (var j = 0; j < layout; j++) {\n        customBoard[i].push(0);\n      }\n    }\n\n    var zoomProperty = 100 - layout * 2.5;\n    board.style.zoom = zoomProperty > 6 ? `${zoomProperty}%` : \"6%\";\n    setBoard(customBoard);\n  }\n};\n\nconst setBoard = selectedLayout => {\n  data = selectedLayout;\n  document.getElementById(\"board-container\").classList.remove(\"play-screen\");\n  document.getElementById(\"side-container\").classList.remove(\"play-screen\");\n  document.onkeydown = checkKey;\n  document.addEventListener('touchstart', handleTouchStart, false);\n  document.addEventListener('touchmove', handleTouchMove, false);\n\n  generateTile(data);\n  rerenderBoard(data);\n};\n\n// Initalize end button click event listener\ndocument.getElementById(\"end-btn\").onclick = () => {\n  saveScore();\n  startGame();\n};\n\ndocument.getElementById(\"layoutTxt\").onchange = () => {\n  document.getElementById(\"by-layout\").textContent =\n    \"by \" + document.getElementById(\"layoutTxt\").value;\n};\n\nfunction getTouches(evt) {\n  return evt.touches // browser API\n}\n\nfunction handleTouchStart(evt) {\n    const firstTouch = getTouches(evt)[0];\n    xDown = firstTouch.clientX;\n    yDown = firstTouch.clientY;\n};\n\nfunction handleTouchMove(evt) {\n  if ( ! xDown || ! yDown ) {\n    return;\n  }\n\n  var xUp = evt.touches[0].clientX;\n  var yUp = evt.touches[0].clientY;\n\n  var xDiff = xDown - xUp;\n  var yDiff = yDown - yUp;\n\n  if ( Math.abs( xDiff ) > Math.abs( yDiff ) ) {/*most significant*/\n    if ( xDiff > 0 ) {\n      /* right swipe */\n      checkKey(null, 37, \"left\");\n    } else {\n      /* left swipe */\n      checkKey(null, 39, \"right\");\n    }\n  } else {\n    if ( yDiff > 0 ) {\n      /* down swipe */\n      checkKey(null, 38, \"up\");\n    } else {\n      /* up swipe */\n      checkKey(null, 40, \"down\");\n    }\n  }\n\n  /* reset values */\n  xDown = null;\n  yDown = null;\n};"],"names":["$58e3021e4f58e301$export$37d1f1142265ff7d","board","blanks","forEach","row","i","tile","j","push","randomValue","$58e3021e4f58e301$var$getRandomInt","length","$58e3021e4f58e301$var$probability","min","max","Math","ceil","floor","random","n","parseFloat","$54b47fc030b7b21e$var$data","$54b47fc030b7b21e$var$board","document","getElementsByClassName","$54b47fc030b7b21e$var$scoreTxtObj","getElementById","$54b47fc030b7b21e$var$highscoreTxtObj","$54b47fc030b7b21e$var$score","$54b47fc030b7b21e$var$hasWon","$54b47fc030b7b21e$var$xDown","$54b47fc030b7b21e$var$yDown","$54b47fc030b7b21e$var$startGame","selectedData","textContent","$54b47fc030b7b21e$var$getCookie","classList","add","onkeydown","removeEventListener","$54b47fc030b7b21e$var$handleTouchStart","$54b47fc030b7b21e$var$handleTouchMove","key","cookieArr","cookie","split","cnt","cookiePair","trim","decodeURIComponent","window","onload","$54b47fc030b7b21e$var$loseGame","Swal","isVisible","fire","icon","title","html","showCloseButton","confirmButtonText","then","result","isConfirmed","$54b47fc030b7b21e$var$saveScore","$54b47fc030b7b21e$var$winGame","$54b47fc030b7b21e$var$rerenderBoard","innerHTML","rowElement","createElement","className","item","id","toString","appendChild","$54b47fc030b7b21e$var$checkKey","e","swipe","direction","$54b47fc030b7b21e$var$triggerReflow","event","preventDefault","keyCode","parseInt","substr","toLowerCase","style","animation","matched","detail","dir","shift","repeated","matchedTiles","didShift","col","tiles","$58e3021e4f58e301$export$eabcd2c8791e7bf4","$58e3021e4f58e301$export$e1f445cd6eeea85e","$58e3021e4f58e301$export$79ffe56a765070d2","$58e3021e4f58e301$export$5df884bdba3ad6a1","newTilePos","newTileObj","matchedTile","isNaN","safe","value","$58e3021e4f58e301$export$6b9f57057074c588","setTimeout","obj","offsetHeight","onclick","toggle","layout","customBoard","zoomProperty","zoom","$54b47fc030b7b21e$var$setBoard","selectedLayout","remove","addEventListener","evt","firstTouch","touches","$54b47fc030b7b21e$var$getTouches","clientX","clientY","xUp","yUp","xDiff","yDiff","abs","onchange"],"version":3,"file":"index.d905149b.js.map"}